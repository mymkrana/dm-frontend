var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import querystring from 'querystring';

function removeUndefinedOrNull(obj) {
  Object.keys(obj).forEach(function (key) {
    if (obj[key] === undefined || obj[key] === null) delete obj[key];
  });

  return obj;
}

function UIAvatar(_ref) {
  var size = _ref.size,
      fontSize = _ref.fontSize,
      length = _ref.length,
      name = _ref.name,
      rounded = _ref.rounded,
      background = _ref.background,
      color = _ref.color,
      uppercase = _ref.uppercase,
      props = _objectWithoutProperties(_ref, ['size', 'fontSize', 'length', 'name', 'rounded', 'background', 'color', 'uppercase']);

  var query = querystring.stringify(removeUndefinedOrNull({
    size: size,
    'font-size': fontSize,
    length: length,
    name: name,
    rounded: rounded,
    background: background,
    color: color,
    uppercase: uppercase
  }));

  return React.createElement('img', _extends({ src: 'https://ui-avatars.com/api/?' + query, alt: name }, props));
}
UIAvatar.propTypes = process.env.NODE_ENV !== "production" ? {
  size: PropTypes.number,
  fontSize: PropTypes.number,
  length: PropTypes.number,
  name: PropTypes.string,
  rounded: PropTypes.bool,
  background: PropTypes.string,
  color: PropTypes.string,
  uppercase: PropTypes.boolean
} : {};
UIAvatar.settings = {};
UIAvatar.defaultProps = UIAvatar.settings;

export default UIAvatar;